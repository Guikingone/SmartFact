version: "3.1"

services:
    # Core configuration
    debian:
        container_name: ${CONTAINER_NAME}_debian
        build: './docker/debian'
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

    nginx:
        container_name: ${CONTAINER_NAME}_nginx
        image: nginx
        ports:
            - '${NGINX_PORT}:80'
        links:
            - debian
        volumes:
            - './:${WORKPATH}:rw'
            - './docker/nginx/conf/core/nginx.conf:/etc/nginx/conf/nginx.conf:ro'
            - './docker/nginx/conf/app/dev:/etc/nginx/conf.d:ro'
            # - './docker/nginx/conf/app/prod:/etc/nginx/conf.d:ro' -> Uncomment this line for production.
            - './docker/nginx/logs/:/var/log/nginx'
        restart: always

    php-fpm:
        container_name: ${CONTAINER_NAME}_php-fpm
        build: './docker/php'
        environment:
            BLACKFIRE_SERVER_ID: '${BLACKFIRE_SERVER_ID}'
            BLACKFIRE_SERVER_TOKEN: '${BLACKFIRE_SERVER_TOKEN}'
        ports:
            - '${PHP_PORT}:9000'
        links:
            - debian
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

    redis:
        container_name: ${CONTAINER_NAME}_redis
        image: redis
        ports:
          - '${REDIS_PORT}:6379'
        links:
          - debian
        restart: always

    # DB configuration
    postgresql:
        container_name: ${CONTAINER_NAME}_postgresql
        image: postgres:9.6 # Update to 10.0 once Doctrine is updated.
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - '${POSTGRES_PORT}:5432'
        volumes:
            - 'postgres_smartfact:/var/lib/postgresql/data:rw'
        restart: always

    mongodb:
        container_name: ${CONTAINER_NAME}_mongodb
        image: mongo
        ports:
            - '${MONGODB_PORT}:27017'
        volumes:
            - 'mongo_smartfact:/data/db'
        restart: always

    # Frontend configuration
    node:
        container_name: ${CONTAINER_NAME}_nodejs
        build: './docker/node'
        links:
            - debian
        volumes:
            - './:${WORKPATH}:rw'
        working_dir: ${WORKPATH}
        command: bash -c "yarn && yarn dev"
        restart: always

    # Testing configuration
    blackfire:
        container_name: ${CONTAINER_NAME}_blackfire
        image: blackfire/blackfire
        environment:
            BLACKFIRE_SERVER_ID: '${BLACKFIRE_SERVER_ID}'
            BLACKFIRE_SERVER_TOKEN: '${BLACKFIRE_SERVER_TOKEN}'
        links:
            - php-fpm
        volumes:
            - './:${WORKPATH}:rw'
        restart: always

volumes:
    postgres_smartfact:
    mongo_smartfact:
